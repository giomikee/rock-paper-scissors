{"version":3,"sources":["components/Header.js","constants.js","components/GameMode.js","components/App.js","components/NotFound.js","components/Router.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","HOME","GameMode","selectGameMode","gameId","props","history","push","sm","Card","bg","Body","Button","variant","onClick","block","disabled","Date","now","Component","App","state","firstPlayer","move","score","secondPlayer","bot","NotFound","Alert","Heading","Router","basename","process","exact","path","component","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","StrictMode","Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAGe,SAASA,IACvB,OACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,qD,mECPSC,EAAO,uBCaCC,E,4MAMpBC,eAAiB,SAACC,GACjB,EAAKC,MAAMC,QAAQC,KAAnB,UAA2BN,EAA3B,iBAAwCG,GAAU,U,uDAEzC,IAAD,OACR,OACC,kBAACL,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKQ,GAAG,MACP,kBAACC,EAAA,EAAD,CAAMC,GAAG,SACR,kBAACD,EAAA,EAAKX,OAAN,2BACA,kBAACW,EAAA,EAAKE,KAAN,KACC,kBAACC,EAAA,EAAD,CACCC,QAAQ,UACRC,QAAS,kBAAM,EAAKX,kBACpBY,OAAK,GAHN,QAOA,kBAACH,EAAA,EAAD,CACCC,QAAQ,OACRE,OAAK,EACLC,UAAQ,EACRF,QAAS,kBAAM,EAAKX,eAAec,KAAKC,SAJzC,iBAMe,0D,GA7BgBC,aCXjBC,E,4MACpBC,MAAQ,CACPC,YAAa,CACZC,KAAM,KACNC,MAAO,GAERC,aAAc,CACbF,KAAM,KACNC,MAAO,GAERE,IAAK,CACJH,KAAM,KACNC,MAAO,I,uDAKR,OAAO,kC,GAjBwBL,a,QCSlB,SAASQ,IACvB,OACC,kBAAC5B,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKQ,GAAG,MACP,kBAACoB,EAAA,EAAD,CAAOf,QAAQ,UACd,kBAACe,EAAA,EAAMC,QAAP,0BCDU,SAASC,IACvB,OACC,kBAAC,IAAD,CAAeC,SAAUC,wBACxB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAOgC,KAAI,gBAAmBC,UAAWf,IACzC,kBAAC,IAAD,CAAOe,UAAWR,MCTFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAAQC,KAAK,CACZC,OAAQ,CAAEC,SAAU,CAAC,QAAS,YAAa,eAAgB,cAG5DC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACC,EAAA,EAAD,KACC,kBAAClD,EAAD,MACA,kBAACgC,EAAD,QAGFmB,SAASC,eAAe,SDsGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4129b4d.chunk.js","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nexport default function Header() {\n\treturn (\n\t\t<Row>\n\t\t\t<Col>\n\t\t\t\t<h1>Rock Paper Scissors</h1>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n}\n","export const HOME = '/rock-paper-scissors';\n","/*\n * Created on Tue May 12 2020\n * Author: Gio Justiniano\n * More info: https://github.com/giomikee/\n *\n * Copyright (c) 2020\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Row, Card, Button } from 'react-bootstrap';\nimport { HOME } from '../constants';\n\nexport default class GameMode extends Component {\n\tstatic propTypes = {\n\t\thistory: PropTypes.shape({\n\t\t\tpush: PropTypes.func.isRequired\n\t\t})\n\t};\n\tselectGameMode = (gameId) => {\n\t\tthis.props.history.push(`${HOME}/play/${gameId || 'solo'}`);\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<Col sm='12'>\n\t\t\t\t\t<Card bg='light'>\n\t\t\t\t\t\t<Card.Header>Choose a Game Mode</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\t\tonClick={() => this.selectGameMode()}\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSolo\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant='info'\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\tonClick={() => this.selectGameMode(Date.now())}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tWith a Friend <i>(Work in Progress)</i>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class App extends Component {\n\tstate = {\n\t\tfirstPlayer: {\n\t\t\tmove: null,\n\t\t\tscore: 0\n\t\t},\n\t\tsecondPlayer: {\n\t\t\tmove: null,\n\t\t\tscore: 0\n\t\t},\n\t\tbot: {\n\t\t\tmove: null,\n\t\t\tscore: 0\n\t\t}\n\t};\n\n\trender() {\n\t\treturn <div></div>;\n\t}\n}\n","/*\n * Created on Tue May 12 2020\n * Author: Gio Justiniano\n * More info: https://github.com/giomikee/\n *\n * Copyright (c) 2020\n */\n\nimport React from 'react';\nimport { Col, Row, Alert } from 'react-bootstrap';\n\nexport default function NotFound() {\n\treturn (\n\t\t<Row>\n\t\t\t<Col sm='12'>\n\t\t\t\t<Alert variant='danger'>\n\t\t\t\t\t<Alert.Heading>Page Not Found</Alert.Heading>\n\t\t\t\t</Alert>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n}\n","/*\n * Created on Tue May 12 2020\n * Author: Gio Justiniano\n * More info: https://github.com/giomikee/\n *\n * Copyright (c) 2020\n */\n\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport GameMode from './GameMode';\nimport App from './App';\nimport NotFound from './NotFound';\nimport { HOME } from '../constants';\n\nexport default function Router() {\n\treturn (\n\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/' component={GameMode} />\n\t\t\t\t<Route path={`/play/:gameId`} component={App} />\n\t\t\t\t<Route component={NotFound} />\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * Created on Tue May 12 2020\n * Author: Gio Justiniano\n * More info: https://github.com/giomikee/\n *\n * Copyright (c) 2020\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport WebFont from 'webfontloader';\nimport { Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\nimport Header from './components/Header';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nWebFont.load({\n\tgoogle: { families: ['VT323', 'monospace', 'Bungee Shade', 'cursive'] }\n});\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Container>\n\t\t\t<Header />\n\t\t\t<Router />\n\t\t</Container>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}